<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.yiming1234.NottinghamWall.mapper.TopicMapper">

    <!-- Existing mappings -->

    <insert id="insert" parameterType="cn.yiming1234.NottinghamWall.entity.Topic">
        INSERT INTO topics (id, content, authorID, createdAt, updatedAt, imgURLs)
        VALUES (#{id}, #{content}, #{authorID}, #{createdAt}, #{updatedAt}, #{imgURLs, typeHandler=cn.yiming1234.NottinghamWall.typehandler.JsonTypeHandler})
    </insert>

    <select id="pageQuery" resultMap="topicResultMap">
        SELECT * FROM topics
        <where>
            <if test="username != null and username != ''">
                AND username LIKE CONCAT('%', #{username}, '%')
            </if>
        </where>
        ORDER BY createdAt DESC
    </select>

    <select id="getTopicById" resultMap="topicResultMap">
        SELECT * FROM topics WHERE id = #{id}
    </select>

    <resultMap id="topicResultMap" type="cn.yiming1234.NottinghamWall.entity.Topic">
        <result property="imgURLs" column="imgURLs" typeHandler="cn.yiming1234.NottinghamWall.typehandler.JsonTypeHandler"/>
    </resultMap>

    <!-- Likes functionality -->

    <insert id="likeTopic" parameterType="map">
        INSERT INTO likes (topic_id, user_id)
        VALUES (#{topicId}, #{userId})
    </insert>

    <delete id="unlikeTopic">
        DELETE FROM likes
        WHERE topic_id = #{topicId} AND user_id = #{userId}
    </delete>

    <select id="isLikeTopic" parameterType="map" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM likes
        WHERE topic_id = #{topicId} AND user_id = #{userId}
    </select>

    <select id="getLikeCount" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM likes
        WHERE topic_id = #{topicId}
    </select>

    <!-- Collections functionality -->

    <insert id="collectTopic" parameterType="map">
        INSERT INTO collections (topic_id, user_id)
        VALUES (#{topicId}, #{userId})
    </insert>

    <delete id="uncollectTopic" parameterType="map">
        DELETE FROM collections
        WHERE topic_id = #{topicId} AND user_id = #{userId}
    </delete>

    <select id="isCollectTopic" parameterType="map" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM collections
        WHERE topic_id = #{topicId} AND user_id = #{userId}
    </select>

    <select id="getCollectCount" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM collections
        WHERE topic_id = #{topicId}
    </select>

    <!-- Comments functionality -->

    <insert id="commentTopic" parameterType="cn.yiming1234.NottinghamWall.dto.CommentDTO">
        INSERT INTO comment (id, topic_id, user_id, content, parent_id, created_at, updated_at)
        VALUES (#{id}, #{topicId}, #{userId}, #{content}, #{parentId}, #{createdAt}, #{updatedAt})
    </insert>

    <select id="getComments" parameterType="string" resultMap="CommentResultMap">
        SELECT
            c.id AS id,
            c.topic_id AS topicId,
            c.user_id AS userId,
            c.content,
            c.parent_id AS parentId,
            c.created_at AS createdAt,
            s.id AS "user.id",
            s.username AS "user.username",
            s.avatar AS "user.avatar"
        FROM
            comment c
                JOIN
            student s ON c.user_id = s.id
        WHERE
            c.topic_id = #{topicId}
        ORDER BY c.created_at ASC
    </select>

    <resultMap id="CommentResultMap" type="cn.yiming1234.NottinghamWall.dto.CommentDTO">
        <id property="id" column="id"/>
        <result property="topicId" column="topicId"/>
        <result property="userId" column="userId"/>
        <result property="content" column="content"/>
        <result property="parentId" column="parentId"/>
        <result property="createdAt" column="createdAt"/>
        <association property="user" javaType="cn.yiming1234.NottinghamWall.dto.StudentDTO">
            <id property="id" column="user.id"/>
            <result property="username" column="user.username"/>
            <result property="avatar" column="user.avatar"/>
        </association>
    </resultMap>

    <!-- Get comment count -->

    <select id="getCommentCount" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM comment
        WHERE topic_id = #{topicId}
    </select>

    <!-- Delete functionalities -->

    <delete id="deleteTopicLikes" parameterType="string">
        DELETE FROM likes WHERE topic_id = #{topicId}
    </delete>

    <delete id="deleteTopicCollections" parameterType="string">
        DELETE FROM collections WHERE topic_id = #{topicId}
    </delete>

    <delete id="deleteTopicComments" parameterType="string">
        DELETE FROM comment WHERE topic_id = #{topicId}
    </delete>

    <delete id="deleteTopic" parameterType="string">
        DELETE FROM topics WHERE id = #{id}
    </delete>

    <!-- Like Comment -->

    <insert id="likeComment" parameterType="map">
        INSERT INTO comment_likes (comment_id, user_id)
        SELECT #{commentId}, #{userId}
            WHERE NOT EXISTS (
        SELECT 1 FROM comment_likes WHERE comment_id = #{commentId} AND user_id = #{userId}
                )
    </insert>

    <!-- Reply Comment -->

    <insert id="replyComment" parameterType="cn.yiming1234.NottinghamWall.dto.CommentDTO">
        INSERT INTO comment (id, topic_id, user_id, content, parent_id, created_at, updated_at)
        VALUES (#{id}, #{topicId}, #{userId}, #{content}, #{parentId}, #{createdAt}, #{updatedAt})
    </insert>

    <!-- Delete Comment -->

    <delete id="deleteComment" parameterType="map">
        DELETE FROM comment
        WHERE id = #{commentId} AND user_id = #{userId}
    </delete>

    <!-- Get Comment Likes -->

    <select id="isLikeComment" parameterType="map" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM comment_likes
        WHERE comment_id = #{commentId} AND user_id = #{userId}
    </select>

    <delete id="unlikeComment" parameterType="map">
        DELETE FROM comment_likes
        WHERE comment_id = #{commentId} AND user_id = #{userId}
    </delete>

</mapper>
